@page "/r"
@page "/r/{*RedditRedirect}"
@using HeardIt.Models
@using HeardIt.Components
@using System.Diagnostics
@using HeardIt.Helpers

@inject IHttpClientFactory _clientFactory
@inject NavigationManager _navManager
@inject IJSRuntime _jsRuntime;
@inject IGoogleTts _googleTts;

@if (SettingsDialogOpen)
{
    <SettingsModal OnClose="@OnSettingsDialogClose" FormSubmitted="@SettingsChanged" SettingsModel="@SettingsModel">
    </SettingsModal>
}

<div id="post-display" class="flex flex-row justify-center w-full content-center items-center">
    <button class="text-gray-600" onclick="@DecrementPost">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
        </svg>
    </button>

    <PostDisplay Post="@MainPost" OpenSettingsDialog="@OpenSettingsDialog" PostLoading="@PostLoading"></PostDisplay>


    <button class="text-gray-600" onclick="@IncrementPost">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
        </svg>
    </button>
</div>


<div id="media-display" class="flex flex-row justify-center w-full content-center items-center mb-16">
    <button @onclick="AudioPlaying ? PauseSound : PlaySound" class="mx-auto">
        @if (AudioPlaying)
        {
            <svg xmlns="http://www.w3.org/2000/svg" class="h-20 w-20" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"/>
            </svg>
        }
        else
        {
            <svg xmlns="http://www.w3.org/2000/svg" class="h-20 w-20" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd"/>
            </svg>
        }
    </button>
</div>

<div id="comment-display" class="flex flex-row justify-center w-full content-center items-center mb-16">
    <div class="rounded mx-8 overflow-hidden border w-full lg:w-10/12 md:w-10/12 bg-gray-50 shadow-2xl">
        <div class="w-full flex justify-between items-center p-3 bg-gray-500">
            <span class="h-full font-bold text-lg text-white">Comments</span>
        </div>
        @if (!CommentsLoading && Comments != null)
        {
            foreach (var comment in Comments)
            {
                if (comment.Kind != "more")
                {
                    <CommentsDisplay CurrentComment="@comment" CommentsLoading="@CommentsLoading"/>
                }
            }
        }
        else
        {
            <div class="px-5 pb-2 shadow-inner">
                <div class="pt-2">
                    <div class="mb-2 my-2 text-sm text-gray-500 text-justify flex flex-col justify-center items-center">
                        <svg class="animate-spin -ml-1 mr-3 h-8 w-8" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<audio id="post-audio" src="@BaseAudio"></audio>
<span class="border-purple-500 border-2 border-opacity-50"></span>

@code {
    private AudioUpdateInvokeHelper audioUpdateInvokeHelper;

    protected async Task InteropCall()
    {
        await _jsRuntime.InvokeVoidAsync("updateAudioCaller",
            DotNetObjectReference.Create(audioUpdateInvokeHelper));
    }

    private async void UpdateAudio()
    {
        BaseAudio = await _googleTts.AudioBase64Tts(Comments[CurrentTrack].Data.Body);
        CachedAudios.Add(BaseAudio);
        StateHasChanged();
        CurrentTrack++;
        var x = CachedAudios;
        await PlaySound();
    }

    private bool AudioPlaying { get; set; } = false;
    private SettingsModel SettingsModel { get; set; } = new() {SubredditInput = "AskReddit"};
    private Subreddit? SubReddit { get; set; }
    private bool SettingsDialogOpen { get; set; }
    //All Posts Loaded From Subreddit Page
    private Posts[]? Posts { get; set; }
    //Currently Displayed Post
    private Post? MainPost { get; set; }
    //All Comments for Current Post
    private static Post[]? Comments { get; set; }

    private List<string> CachedAudios { get; set; } = new List<string>();

    private Post? CurrentComment { get; set; }

    private int CurrentPostIndex { get; set; } = 0;
    private int CurrentCommentIndex { get; set; } = 0;


    private bool PostLoading { get; set; } = true;
    private bool CommentsLoading { get; set; } = true;

    private string? QueryString { get; set; }

    private string? BaseAudio { get; set; }
    private int CurrentTrack { get; set; } = 0;

    [Parameter]
    public string? RedditRedirect { get; set; }


    private async void DecrementPost()
    {
        if (CurrentPostIndex == 0)
        {
            return;
        }
        if (Posts == null || Posts.Length == 0) return;
        --CurrentPostIndex;
        if (Posts[CurrentPostIndex] == null || Posts[CurrentPostIndex].Data == null || Posts[CurrentPostIndex].Data.Url == null) return;
        await LoadPost(Posts[CurrentPostIndex].Data.Permalink);
    }

    private async void IncrementPost()

    {
        if (Posts == null || Posts.Length == 0)
        {
            await LoadSubredditPosts("", true);
            return;
        }
        if (CurrentPostIndex == Posts.Length - 1)
        {
            var after = MainPost.Kind + "_" + MainPost.Data.Id;
            ++CurrentPostIndex;
            await LoadSubredditPosts(after);
            return;
        }
        ++CurrentPostIndex;
        if (Posts[CurrentPostIndex] == null || Posts[CurrentPostIndex].Data == null || Posts[CurrentPostIndex].Data.Url == null) return;
        await LoadPost(Posts[CurrentPostIndex].Data.Permalink);
    }

    private async Task SettingsChanged(SettingsModel settings)
    {
        SettingsModel = settings;
        SettingsDialogOpen = false;
        await LoadSubredditPosts("", true);
    }

    private void OnSettingsDialogClose(bool accepted)
    {
        SettingsDialogOpen = false;
    }

    private void OpenSettingsDialog()
    {
        SettingsDialogOpen = true;
    }

    protected override async Task OnInitializedAsync()
    {
        audioUpdateInvokeHelper = new AudioUpdateInvokeHelper(UpdateAudio);
        QueryString = _navManager.ToAbsoluteUri(_navManager.Uri).Query;
        if (!string.IsNullOrEmpty(RedditRedirect))
        {
            if (RedditRedirect.Contains("/") && RedditRedirect.Split("/")[1] != null && RedditRedirect.Split("/")[1] == "comments")
            {
                SettingsModel.SubredditInput = RedditRedirect.Split("/")[0];
                await LoadPost(_navManager.ToAbsoluteUri(_navManager.Uri).AbsolutePath, QueryString);
            }
            else
            {
                SettingsModel.SubredditInput = RedditRedirect;
                await LoadSubredditPosts();
            }
        }
        else
        {
            await LoadSubredditPosts();
        }
        await InteropCall();
    }

    public async Task PlaySound()
    {
        AudioPlaying = true;
        await _jsRuntime.InvokeAsync<string>("PlayAudio", "post-audio", (CurrentTrack == 0) ? MainPost?.Data.Id : Comments?[CurrentTrack -1].Data.Id);
    }

    public async Task PauseSound()
    {
        AudioPlaying = false;
        await _jsRuntime.InvokeAsync<string>("PauseAudio", "post-audio");
    }

    private async Task LoadSubredditPosts(string after = "", bool newSub = false)
    {
        if (!string.IsNullOrEmpty(QueryString))
        {
            QueryString += "&limit=5";
        }
        else
        {
            QueryString = "?limit=5";
        }
        var url = $"https://www.reddit.com/r/{SettingsModel.SubredditInput}.json{QueryString}";
        if (!string.IsNullOrEmpty(after))
        {
            url = url + $"&after={after}";
        }

        var request = new HttpRequestMessage(HttpMethod.Get, url);
        var client = _clientFactory.CreateClient();

        HttpResponseMessage responseMessage = await client.SendAsync(request);

        if (responseMessage.IsSuccessStatusCode)
        {
            var jsonString = await responseMessage.Content.ReadAsStringAsync();
            SubReddit = Subreddit.FromJson(jsonString);
            if (newSub)
            {
                Posts = SubReddit.Data.Posts.Where(x => x.Data.Stickied != true).ToArray();
                CurrentPostIndex = 0;
            }
            else
            {
                var addPosts = SubReddit.Data.Posts.Where(x => x.Data.Stickied != true).ToArray();
                Posts = Posts != null ? Posts.Concat(addPosts).ToArray() : addPosts;
            }

            await LoadPost(Posts[CurrentPostIndex].Data.Permalink);
        }
    }

    private async void SetBaseAudio(string input)
    {
        if (string.IsNullOrEmpty(input)) return;
        var x = await _googleTts.AudioBase64Tts(input);
        BaseAudio = x;
        CachedAudios.Add(x);
        StateHasChanged();
    }

    private async Task LoadPost(string permalink, string query = "")
    {
        if (string.IsNullOrEmpty(query))
        {
            query = "?limit=7&depth=0&after=";
        }
        else
        {
            query += "&limit=7&depth=0&after=";
        }
        var url = "https://reddit.com" + permalink + ".json" + query;
        var request = new HttpRequestMessage(HttpMethod.Get, url);
        var client = _clientFactory.CreateClient();

        PostLoading = true;
        CommentsLoading = true;
        HttpResponseMessage responseMessage = await client.SendAsync(request);

        if (responseMessage.IsSuccessStatusCode)
        {
            var jsonString = await responseMessage.Content.ReadAsStringAsync();
            var postPages = PostPage.FromJson(jsonString);
            MainPost = postPages[0].Data.Children[0];
            Comments = postPages[1].Data.Children;
            SetBaseAudio(MainPost.Data.Title);
            CurrentTrack = 0;
            CurrentComment = Comments[0];
            CurrentCommentIndex = 0;
            PostLoading = false;
            CommentsLoading = false;
        }
        StateHasChanged();
    }

}