@page "/r"
@page "/r/{*RedditRedirect}"
@using HeardIt.Models
@using HeardIt.Components

@inject IHttpClientFactory _clientFactory
@inject NavigationManager _navManager


@if (SettingsDialogOpen)
{
    <SettingsModal OnClose="@OnSettingsDialogClose" FormSubmitted="@SettingsChanged" SettingsModel="@SettingsModel">
    </SettingsModal>
}

<div id="post-display" class="flex flex-row justify-center w-full content-center items-center">
    <button class="text-gray-600" onclick="@DecrementPost">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
        </svg>
    </button>

    <PostDisplay Post="@((_loadedPosts.Count > 0) ? _loadedPosts[0] : null)" OpenSettingsDialog="@OpenSettingsDialog" PostLoading="@PostLoading"></PostDisplay>


    <button class="text-gray-600" onclick="@IncrementPost">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
        </svg>
    </button>
</div>

@if (_loadedPosts.Count > 0)
{
    <AudioManager LoadedPosts="@_loadedPosts"></AudioManager>
}

<div id="comment-display" class="flex flex-row justify-center w-full content-center items-center mb-16">
    <div class="rounded mx-8 overflow-hidden border w-full lg:w-10/12 md:w-10/12 bg-gray-50 shadow-2xl">
        <div class="w-full flex justify-between items-center p-3 bg-gray-500">
            <span class="h-full font-bold text-lg text-white">Comments</span>
        </div>
        @if (!PostLoading & _loadedPosts.Count > 1)
        {
            foreach (var comment in _loadedPosts.GetRange(1, _loadedPosts.Count - 1))
            {
                if (comment.Kind != "more")
                {
                    <CommentsDisplay CurrentComment="@comment" CommentsLoading="@PostLoading"/>
                }
            }
        }
        else
        {
            <div class="px-5 pb-2 shadow-inner">
                <div class="pt-2">
                    <div class="mb-2 my-2 text-sm text-gray-500 text-justify flex flex-col justify-center items-center">
                        <svg class="animate-spin -ml-1 mr-3 h-8 w-8" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                    </div>
                </div>
            </div>
        }
        <div class="w-full flex justify-between items-center p-3 bg-gray-500">
            <button class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-transparent text-base font-medium text-gray-50 hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M7.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l2.293 2.293a1 1 0 010 1.414z" clip-rule="evenodd"/>
                </svg>
                Back
            </button>
            <button class="mt-3 w-full inline-flex flex-row-reverse justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-transparent text-base font-medium text-gray-50 hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd"/>
                </svg>
                Next
            </button>
        </div>
    </div>
</div>


@code {

    [Parameter]
    public string? RedditRedirect { get; set; }

    //Controls the Settings for the Modal. Set Defaults Here
    private SettingsModel SettingsModel { get; set; } = new() {SubredditInput = "AskReddit"};
    //Controls if the settings modal is displayed.
    private bool SettingsDialogOpen { get; set; }
    //List of Post info from loaded subreddit page.
    private Posts[]? Posts { get; set; }
    //Manages where we are in the Posts Array above. This enables going back to the same previous post and tracking when we need to load a new subreddit pa.
    private int CurrentPostIndex { get; set; } = 0;
    //The first entry will always be the Post, any entries after are the comments.
    private List<Post> _loadedPosts = new List<Post>();
    //Manages if the spinners are displayed to indicate loading.
    private bool PostLoading { get; set; } = true;
    //Store the query string from the inital post or subreddit request. Enables using the same settings as we load new pages.
    private string? QueryString { get; set; }

    protected override async Task OnInitializedAsync()
    {
        QueryString = _navManager.ToAbsoluteUri(_navManager.Uri).Query;
        if (!string.IsNullOrEmpty(RedditRedirect))
        {
            if (RedditRedirect.Contains("/") && RedditRedirect.Split("/")[1] != null && RedditRedirect.Split("/")[1] == "comments")
            {
                SettingsModel.SubredditInput = RedditRedirect.Split("/")[0];
                await LoadPost(_navManager.ToAbsoluteUri(_navManager.Uri).AbsolutePath, QueryString);
            }
            else
            {
                SettingsModel.SubredditInput = RedditRedirect;
                await LoadSubredditPosts();
            }
        }
        else
        {
            await LoadSubredditPosts();
        }
    }

    private async Task SettingsChanged(SettingsModel settings)
    {
        SettingsModel = settings;
        SettingsDialogOpen = false;
        await LoadSubredditPosts("", true);
    }

    private void OnSettingsDialogClose(bool accepted)
    {
        SettingsDialogOpen = false;
    }

    private void OpenSettingsDialog()
    {
        SettingsDialogOpen = true;
    }

    private async void DecrementPost()
    {
        if (CurrentPostIndex == 0)
        {
            return;
        }
        if (Posts == null || Posts.Length == 0) return;
        --CurrentPostIndex;
        if (Posts[CurrentPostIndex] == null || Posts[CurrentPostIndex].Data == null || Posts[CurrentPostIndex].Data.Url == null) return;
        await LoadPost(Posts[CurrentPostIndex].Data.Permalink);
    }

    private async void IncrementPost()

    {
        if (Posts == null || Posts.Length == 0)
        {
            await LoadSubredditPosts("", true);
            return;
        }
        if (CurrentPostIndex == Posts.Length - 1)
        {
            var after = _loadedPosts[0].Kind + "_" + _loadedPosts[0].Data.Id;
            ++CurrentPostIndex;
            await LoadSubredditPosts(after);
            return;
        }
        ++CurrentPostIndex;
        if (Posts[CurrentPostIndex] == null || Posts[CurrentPostIndex].Data == null || Posts[CurrentPostIndex].Data.Url == null) return;
        await LoadPost(Posts[CurrentPostIndex].Data.Permalink);
    }

    private async Task LoadSubredditPosts(string after = "", bool newSub = false)
    {
        if (!string.IsNullOrEmpty(QueryString))
        {
            QueryString += "&limit=5";
        }
        else
        {
            QueryString = "?limit=5";
        }
        var url = $"https://www.reddit.com/r/{SettingsModel.SubredditInput}.json{QueryString}";
        if (!string.IsNullOrEmpty(after))
        {
            url = url + $"&after={after}";
        }

        var request = new HttpRequestMessage(HttpMethod.Get, url);
        var client = _clientFactory.CreateClient();

        HttpResponseMessage responseMessage = await client.SendAsync(request);

        if (responseMessage.IsSuccessStatusCode)
        {
            var jsonString = await responseMessage.Content.ReadAsStringAsync();
            Subreddit subreddit = Subreddit.FromJson(jsonString);
            if (newSub)
            {
                Posts = subreddit.Data.Posts.Where(x => x.Data.Stickied != true).ToArray();
                CurrentPostIndex = 0;
            }
            else
            {
                var addPosts = subreddit.Data.Posts.Where(x => x.Data.Stickied != true).ToArray();
                Posts = Posts != null ? Posts.Concat(addPosts).ToArray() : addPosts;
            }

            await LoadPost(Posts[CurrentPostIndex].Data.Permalink);
        }
    }


    private async Task LoadPost(string permalink, string query = "")
    {
        if (string.IsNullOrEmpty(query))
        {
            query = "?limit=7&depth=0&after=";
        }
        else
        {
            query += "&limit=7&depth=0&after=";
        }
        var url = "https://reddit.com" + permalink + ".json" + query;
        var request = new HttpRequestMessage(HttpMethod.Get, url);
        var client = _clientFactory.CreateClient();

        PostLoading = true;
        HttpResponseMessage responseMessage = await client.SendAsync(request);

        if (responseMessage.IsSuccessStatusCode)
        {
            var jsonString = await responseMessage.Content.ReadAsStringAsync();
            var postPages = PostPage.FromJson(jsonString);
            _loadedPosts.Clear();
            _loadedPosts.Add(postPages[0].Data.Children[0]);
            _loadedPosts.AddRange(postPages[1].Data.Children);
            PostLoading = false;
        }
    }

}