@using HeardIt.Models
@using Microsoft.Extensions.Logging
@using HeardIt.Models
@using HeardIt.Helpers

@inject IGoogleTts _googleTts


<div id="modal-container">
    <EditForm EditContext="@_editContext" OnSubmit="@HandleSubmit">
        <div class="fixed z-10 inset-0 overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
            <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
                <!--
                Background overlay, show/hide based on modal state.

                Entering: "ease-out duration-300"
                From: "opacity-0"
                To: "opacity-100"
                Leaving: "ease-in duration-200"
                From: "opacity-100"
                To: "opacity-0"
                -->
                <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>

                <!-- This element is to trick the browser into centering the modal contents. -->
                <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>

                <!--
                Modal panel, show/hide based on modal state.

                Entering: "ease-out duration-300"
                From: "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                To: "opacity-100 translate-y-0 sm:scale-100"
                Leaving: "ease-in duration-200"
                From: "opacity-100 translate-y-0 sm:scale-100"
                To: "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                -->
                <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
                    <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                        <div class="text-left w-full">
                            <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                                Settings
                            </h3>
                            <p>
                                <DataAnnotationsValidator/>
                                <ValidationSummary/>
                            </p>
                            <div class="mt-2 w-full">
                                <div class="w-full">
                                    <label for="company-website" class="block text-sm font-medium text-gray-700">
                                        Subreddit
                                    </label>
                                    <div class="mt-1 flex rounded-md shadow-sm">
                                        <span class="inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500 text-sm">
                                            r/
                                        </span>
                                        <input @bind-value="SettingsModel.SubredditInput" type="text" name="company-website" id="company-website" class="focus:ring-indigo-500 focus:border-indigo-500 flex-1 block w-full rounded-none rounded-r-md sm:text-sm border-gray-300" placeholder="AskReddit">
                                    </div>
                                    <select @bind="SettingsModel.Language">
                                        @if (SettingsModel.Languages != null)
                                        {
                                            foreach (var language in SettingsModel.Languages)
                                            {
                                                <option value="@language">@language</option>
                                            }
                                        }
                                    </select>
                                    <select @bind="SettingsModel.Voice">
                                        @if (SettingsModel.VoiceNames != null)
                                        {
                                            foreach (var voice in SettingsModel.VoiceNames.OrderBy(x => x.Name))
                                            {
                                                <option value="@voice.Name">@voice.Name - @voice.SsmlGender</option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                        <button type="submit" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-green-600 text-base font-medium text-white hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 sm:ml-3 sm:w-auto sm:text-sm">
                            Save
                        </button>
                        <button @onclick="@ModalCancel" type="button" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                            Cancel
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>

</div>


@code {
    private EditContext _editContext;

    [Parameter]
    public SettingsModel SettingsModel { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public EventCallback<SettingsModel> FormSubmitted { get; set; }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }
    
    protected override async Task OnInitializedAsync()
    {
        _editContext = new(SettingsModel);
        SettingsModel.Languages = await _googleTts.GetLanguages();
        SettingsModel.VoiceNames = await _googleTts.GetVoicesForLanguage(SettingsModel.Language);
    }

    private async Task HandleSubmit()
    {
        if (_editContext.Validate())
        {
            await FormSubmitted.InvokeAsync(SettingsModel);
            await Task.CompletedTask;
        }
    }

}